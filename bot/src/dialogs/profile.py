from datetime import UTC, datetime
from typing import Any

from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.kbd import Button
from aiogram_dialog.widgets.text import Const, Format
from dishka import FromDishka
from dishka.integrations.aiogram_dialog import inject

from src.dialogs.states import ProfileSG, RegistrationSG
from src.repositories.donor import DonorRepository


async def back_to_registration(
    callback: CallbackQuery,
    button: Button,
    dialog_manager: DialogManager,
) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—Ä–∞—Ç–Ω–æ
    phone = None
    if dialog_manager.start_data and isinstance(dialog_manager.start_data, dict):
        phone = dialog_manager.start_data.get("phone")

    if not phone:
        phone = dialog_manager.dialog_data.get("phone")

    await dialog_manager.start(RegistrationSG.account_access, data={"phone": phone})


@inject
async def get_profile_data(
    dialog_manager: DialogManager,
    donor_repository: FromDishka[DonorRepository],
    **kwargs: Any,
) -> dict[str, Any]:
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ start_data –∏–ª–∏ dialog_data
    phone = None
    if dialog_manager.start_data and isinstance(dialog_manager.start_data, dict):
        phone = dialog_manager.start_data.get("phone")

    if not phone:
        phone = dialog_manager.dialog_data.get("phone")

    if not phone:
        return {
            "full_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "donations_count": 0,
            "last_donation_date": "‚Äî",
            "last_donation_center": "‚Äî",
            "donations_history": "‚Äî",
            "total_blood_donated": "‚Äî",
        }

    donor = await donor_repository.get_by_phone_number(phone)

    if not donor:
        return {
            "full_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "donations_count": 0,
            "last_donation_date": "‚Äî",
            "last_donation_center": "‚Äî",
            "donations_history": "‚Äî",
            "total_blood_donated": "‚Äî",
        }

    # –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    mock_last_donation = datetime(1970, 1, 1, tzinfo=UTC)
    formatted_date = mock_last_donation.strftime("%d.%m.%Y")

    return {
        "full_name": donor.full_name,
        "donations_count": 0,
        "last_donation_date": formatted_date,
        "last_donation_center": "‚Äî",
        "donations_history": "‚Äî",
        "total_blood_donated": "‚Äî",
    }


profile_dialog = Dialog(
    Window(
        Format(
            "üë§ **–ü—Ä–æ—Ñ–∏–ª—å –¥–æ–Ω–æ—Ä–∞**\n\n"
            "üìù **–§–ò–û:** {full_name}\n"
            "ü©∏ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π:** {donations_count}\n"
            "üìÖ **–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–Ω–∞—Ü–∏—è:** {last_donation_date}\n"
            "üè• **–¶–µ–Ω—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏:** {last_donation_center}\n"
            "üìã **–ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π:** {donations_history}\n"
            "ü©∏ **–í—Å–µ–≥–æ –∫—Ä–æ–≤–∏ —Å–¥–∞–Ω–æ:** {total_blood_donated}"
        ),
        Button(
            Const("üîô –ù–∞–∑–∞–¥"),
            id="back_button",
            on_click=back_to_registration,
        ),
        state=ProfileSG.profile_view,
        getter=get_profile_data,
    ),
)
