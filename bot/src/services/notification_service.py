from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from src.repositories.donor import DonorRepository


class NotificationService:
    def __init__(self, bot: Bot) -> None:
        self.bot = bot

    async def send_account_change_notification(
        self, old_telegram_id: int, full_name: str, new_telegram_id: int
    ) -> bool:
        message_text = (
            f"‚ö†Ô∏è **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∞–∫–∫–∞—É–Ω—Ç–∞**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{full_name}** –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
            f"–ù–æ–≤—ã–π Telegram ID: `{new_telegram_id}`\n\n"
            f"–ï—Å–ª–∏ —ç—Ç–æ –≤—ã, –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞."
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞",
                        callback_data=f"confirm_account_change:{new_telegram_id}",
                    )
                ],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_account_change")],
            ]
        )

        await self.bot.send_message(
            chat_id=old_telegram_id, text=message_text, reply_markup=keyboard, parse_mode="Markdown"
        )
        return True

    async def send_account_change_confirmed(self, new_telegram_id: int, full_name: str) -> bool:
        message_text = (
            f"‚úÖ **–°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞**\n\n"
            f"–ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{full_name}** —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã."
        )

        await self.bot.send_message(chat_id=new_telegram_id, text=message_text, parse_mode="Markdown")
        return True

    async def send_account_change_rejected(self, new_telegram_id: int, full_name: str) -> bool:
        message_text = (
            f"‚ùå **–°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
            f"–ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{full_name}** –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
        )

        await self.bot.send_message(chat_id=new_telegram_id, text=message_text, parse_mode="Markdown")
        return True

    async def send_donor_day_cancelled_notification(
        self,
        telegram_id: int,
        donor_name: str,
        donor_day_date: str,
    ) -> bool:
        message_text = (
            f"‚ùå **–î–µ–Ω—å –¥–æ–Ω–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
            f"–£–≤–∞–∂–∞–µ–º—ã–π **{donor_name}**!\n\n"
            f"–î–µ–Ω—å –¥–æ–Ω–æ—Ä–∞, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ **{donor_day_date}**, –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º.\n\n"
            f"–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–Ω–∏ –¥–æ–Ω–æ—Ä–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –î–µ–Ω—å –¥–æ–Ω–æ—Ä–∞'."
        )

        await self.bot.send_message(chat_id=telegram_id, text=message_text, parse_mode="Markdown")
        return True

    async def send_donor_day_cancelled_bulk(
        self, notifications_data: list[tuple[int, str, str, int]]
    ) -> dict[str, int]:
        success_count = 0
        failed_count = 0

        for telegram_id, donor_name, donor_day_date, _ in notifications_data:
            success = await self.send_donor_day_cancelled_notification(telegram_id, donor_name, donor_day_date)
            if success:
                success_count += 1
            else:
                failed_count += 1

        return {"success": success_count, "failed": failed_count}

    async def send_bulk_message(self, donors: list, message_text: str, organizer_name: str) -> dict[str, int]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫—É –¥–æ–Ω–æ—Ä–æ–≤"""
        success_count = 0
        failed_count = 0

        for donor in donors:
            if not donor.telegram_id:
                failed_count += 1
                continue

            formatted_message = f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {organizer_name}**\n\n{message_text}"
            await self.bot.send_message(chat_id=donor.telegram_id, text=formatted_message, parse_mode="Markdown")
            success_count += 1

        return {"success": success_count, "failed": failed_count}

    async def send_mailing_to_category(
        self,
        category: str,
        message_text: str,
        organizer_id: int,
        organizer_name: str,
        donor_repository: DonorRepository,
    ) -> dict[str, int]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–Ω–æ—Ä–æ–≤"""
        donors = []

        if category == "upcoming_registered":
            donors = await donor_repository.get_donors_registered_for_upcoming_donor_day(organizer_id)
        elif category == "not_registered":
            donors = await donor_repository.get_donors_not_registered_for_upcoming_dates(organizer_id)
        elif category == "registered_not_confirmed":
            donors = await donor_repository.get_donors_registered_but_not_confirmed(organizer_id)
        elif category == "bone_marrow":
            donors = await donor_repository.get_bone_marrow_donors()

        return await self.send_bulk_message(donors, message_text, organizer_name)
